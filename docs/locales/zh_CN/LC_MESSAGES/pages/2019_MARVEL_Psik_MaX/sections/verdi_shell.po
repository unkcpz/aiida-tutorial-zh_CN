# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA Tutorials package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA Tutorials\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-15 18:01+0000\n"
"PO-Revision-Date: 2019-07-15 18:04+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/aiidateam/teams/98967/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:2
msgid "Verdi shell and AiiDA objects"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:4
msgid ""
"In this section we will use an interactive IPython environment with all the "
"basic AiiDA classes already loaded. We propose two realizations of such a "
"tool. The first consists of a special IPython shell where all the AiiDA "
"classes, methods and functions are accessible. Type in the terminal"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:13
msgid ""
"For all the everyday AiiDA-based operations, i.e. creating, querying, and "
"using AiiDA objects, the ``verdi shell`` is probably the best tool. In this "
"case, we suggest that you use two terminals, one for the ``verdi shell`` and"
" one to execute bash commands."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:18
msgid ""
"The second option is based on Jupyter notebooks and is probably most "
"suitable to the purposes of our tutorial. Go to the browser where you have "
"opened ``jupyter`` and click ``New`` → ``Python 3`` (top right corner). This"
" will open an IPython-based Jupyter notebook, made of cells in which you can"
" type portions of python code. The code will not be executed until you press"
" ``Shift+Enter`` from within a cell. Type in the first cell"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:29
msgid ""
"and execute it. This will set exactly the same environment as the ``verdi "
"shell``. The notebook will be automatically saved upon any modification and "
"when you think you are done, you can export your notebook in many formats by"
" going to ``File`` → ``Download as``. We suggest you to have a look at the "
"drop-down menus ``Insert`` and ``Cell`` where you will find the main "
"commands to manage the cells of your notebook."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:38
msgid ""
"The ``verdi shell`` and Jupyter notebook are completely equivalent. Use "
"either according to your personal preference."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:42
msgid ""
"You will still sometimes need to type command-line instructions in ``bash`` "
"in the first terminal you opened. To differentiate these from the commands "
"to be typed in the ``verdi shell``, the latter will be marked in this "
"document by a green background, like:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:51
msgid ""
"while command-line instructions in ``bash`` to be typed into a terminal will"
" be written with a blue background:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:58
msgid ""
"Alternatively, to avoid changing terminal, you can execute ``bash`` commands"
" within the ``verdi shell`` or the notebook by adding an exclamation mark "
"before the command itself:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:69
msgid "Loading a node"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:71
msgid ""
"Most AiiDA objects are represented by nodes, identified in the database by "
"its ``PK`` (an integer). You can access a node using the following command "
"in the shell:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:79
msgid ""
"Load a node using one of the calculation ``PK`` s visible in the graph you "
"displayed in the previous section of the tutorial. Then get the energy of "
"the calculation with the command"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:87
msgid "You can also type"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:93
msgid ""
"and then press ``TAB`` to see all the available output results of the "
"calculation."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:97
msgid "Loading specific kinds of nodes"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:100
msgid "Pseudopotentials"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:102
msgid ""
"From the graph you generated in  section :ref:`aiidagraph`, find the ``PK`` "
"of the pseudopotential file (LDA). Load it and show what elements it "
"corresponds to by typing:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:111
msgid ""
"All methods of ``UpfData`` are accessible by typing ``upf.`` and then "
"pressing ``TAB``."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:114
msgid "k-points"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:116
msgid ""
"A set of k-points in the Brillouin zone is represented by an instance of the"
" ``KpointsData`` class. Choose one from the graph of produced in section "
":ref:`aiidagraph`, load it as ``kpoints`` and inspect its content:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:125
msgid ""
"Then get the full (explicit) list of k-points belonging to this mesh using"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:131
msgid ""
"If this throws an ``AttributeError``, it means that the kpoints instance "
"does not represent a regular mesh but rather a list of k-points defined by "
"their crystal coordinates (typically used when plotting a band structure). "
"In this case, get the list of k-points coordinates using"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:138
msgid ""
"Conversely, if the `KpointsData` node `does` actually represent a mesh, this"
" method is the one, that when called, will throw an ``AttributeError``."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:140
msgid "If you prefer Cartesian (rather than crystal) coordinates, type"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:146
msgid ""
"For later use in this tutorial, let us try now to create a kpoints instance,"
" to describe a regular (2 x 2 x 2) mesh of k-points, centered at the Gamma "
"point (i.e. without offset). This can be done with the following commands:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:158
msgid ""
"This function loads the appropriate class defined in a string (here "
"``array.kpoints``). Therefore, ``KpointsData`` is not a class instance, but "
"the kpoints class itself!"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:162
msgid ""
"While it is also possible to import ``KpointsData`` directly, it is "
"recommended to use the ``DataFactory`` function instead, as this is more "
"future-proof: even if the import path of the class changes in the future, "
"its entry point string (``array.kpoints``) will remain stable."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:168
msgid "Parameters"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:170
msgid ""
"Dictionaries with various parameters are represented in AiiDA by ``Dict`` "
"nodes. Get the PK and load the input parameters of a calculation in the "
"graph produced in  section :ref:`aiidagraph`. Then display its content by "
"typing"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:180
msgid ""
"Modify the python dictionary ``YOUR_DICT`` so that the wave-function cutoff "
"is now set to 20 Ry. Note that you cannot modify an object already stored in"
" the database. To write the modified dictionary to the database, create a "
"new object of class ``Dict``:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:189
msgid ""
"where ``YOUR_DICT`` is the modified python dictionary. Note that "
"``new_params`` is not yet stored in the database. In fact, typing "
"``new_params`` in the verdi shell will print a string notifying you of its "
"'unstored' status. Let's finish by storing the ``new_params`` dictionary "
"node in the datbase:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:199
msgid "Structures"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:201
msgid ""
"Find a structure in the graph you generated in section :ref:`aiidagraph` and"
" load it. Display its chemical formula, atomic positions and species using"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:209
msgid ""
"where ``structure`` is the structure you loaded. If you are familiar with "
"ASE and PYMATGEN, you can convert this structure to those formats by typing"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:217
msgid ""
"Let’s try now to define a new structure to study, specifically a silicon "
"crystal. In the ``verdi shell``, define a cubic unit cell as a 3 x 3 matrix,"
" with lattice parameter `a`\\ :sub:`lat`\\ `= 5.4` Å:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:228
msgid ""
"Default units for crystal structure cell and coordinates in AiiDA are Å "
"(Ångström)."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:230
msgid ""
"Structures in AiiDA are instances of the class ``StructureData``: load it in"
" the verdi shell"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:237
msgid ""
"Now, initialize the class instance (i.e. the actual structure we want to "
"study) by the command"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:244
msgid ""
"which sets the cubic cell defined before. From now on, you can access the "
"cell with the command"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:251
msgid ""
"Finally, append each of the 2 atoms of the cell command. You can do it using"
" commands like"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:258
msgid ""
"for the first ‘Si’ atom. Repeat it for the other atomic site (0, 0, 0). You "
"can access and inspect the structure sites with the command"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:265
msgid ""
"If you make a mistake, start over from ``structure = "
"StructureData(cell=the_cell)``, or equivalently use "
"``structure.clear_kinds()`` to remove all kinds (atomic species) and sites. "
"Alternatively, AiiDA structures can also be converted directly from ASE "
"structures [#f1]_ using"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:278
msgid ""
"Now you can store the new structure object in the database with the command:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:284
msgid ""
"Finally, we can also import the silicon structure from an external (online) "
"repository such as the Crystallography Open Database (COD):"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:296
msgid "In that case two duplicate structures are found for 'Si'."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:299
msgid "Accessing inputs and outputs"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:301
msgid "Load again the calculation node used in Section :ref:`loadnode`:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:307
msgid "Then type"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:313
msgid ""
"and press ``TAB``: you will see all the link names between the calculation "
"and its input nodes. You can use a specific linkname to access the "
"corresponding input node, e.g.:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:321
msgid "Similarly, if you type:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:327
msgid ""
"and then ``TAB``, you will list all output link names of the calculation. "
"One of them leads to the structure that was the input of ``calc`` we loaded "
"previously:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:335
msgid ""
"Note that links have a single name, that was assigned by the calculation "
"that used the corresponding input or produced the corresponding output, as "
"illustrated in section :ref:`aiidagraph`."
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:339
msgid ""
"For a more programmatic approach, you can get a represenation of the inputs "
"and outputs of a node, say ``calc``, through the following methods:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:346
msgid ""
"These methods will return an instance of the ``LinkManager`` class. You can "
"iterate over the neighboring nodes by calling the ``.all()`` method:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:354
msgid ""
"each entry returned by ``.all()`` is a ``LinkTriple``, a named tuple, from "
"which you can get the link label and type and the neighboring node itself. "
"If you print one, you will see something like:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:361
msgid ""
"There are many other convenience methods on the ``LinkManager``. For example"
" if you are only interested in the link labels you can use:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:368
msgid ""
"which will return a list of all the labels of the outgoing links. Likewise, "
"``.all_nodes()`` will give you a list of all the nodes to which links are "
"going out from the ``calc`` node. If you are looking for the node with a "
"specific label, you can use:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:376
msgid ""
"The ``get_outgoing`` and ``get_incoming`` methods also support filtering on "
"various properties, such as the link label. For example, if you only want to"
" get the outgoing links whose label starts with ``output``, you can do the "
"following:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:385
msgid "Pseudopotential families"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:387
msgid ""
"Pseudopotentials in AiiDA are grouped in 'families' that contain one single "
"pseudo per element. We will see how to work with UPF pseudopotentials (the "
"format used by Quantum ESPRESSO and some other codes). Download and untar "
"the SSSP pseudopotentials via the commands:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:397
msgid ""
"Then you can upload the whole set of pseudopotentials to AiiDA by using the "
"following ``verdi`` command:"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:404
msgid ""
"In the command above, ``SSSP_efficiency_pseudos`` is the folder containing "
"the pseudopotentials, ``'SSSP'`` is the name given to the family, and the "
"last argument is its description. Finally, you can list all the pseudo "
"families present in the database with"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:415
msgid "Footnotes"
msgstr ""

#: ../docs/pages/2019_MARVEL_Psik_MaX/sections/verdi_shell.rst:416
msgid ""
"We purposefully do not provide advanced commands for crystal structure "
"manipulation in AiiDA, because python packages that accomplish such tasks "
"already exist (such as ASE or pymatgen)."
msgstr ""
